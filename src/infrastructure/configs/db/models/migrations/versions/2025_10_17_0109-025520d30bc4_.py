"""empty message

Revision ID: 025520d30bc4
Revises:
Create Date: 2025-10-17 01:09:04.373738

"""

from typing import (
    Sequence,
    Union,
)

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = '025520d30bc4'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'cities',
        sa.Column(
            'id',
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment='Идентификатор города',
        ),
        sa.Column(
            'name', sa.String(length=50), nullable=False, comment='Название города'
        ),
        sa.Column('country', sa.String(length=100), nullable=False, comment='Страна'),
        sa.Column(
            'region', sa.String(length=100), nullable=True, comment='Регион/область'
        ),
        sa.Column(
            'latitude',
            sa.Numeric(precision=9, scale=6),
            nullable=False,
            comment='Широта',
        ),
        sa.Column(
            'longitude',
            sa.Numeric(precision=9, scale=6),
            nullable=False,
            comment='Долгота',
        ),
        sa.Column(
            'timezone', sa.String(length=50), nullable=False, comment='Часовой пояс'
        ),
        sa.Column(
            'created_at',
            sa.DateTime(timezone=True),
            server_default=sa.text('now()'),
            nullable=False,
            comment='Дата, время создания записи',
        ),
        sa.Column(
            'updated_at',
            sa.DateTime(timezone=True),
            nullable=True,
            comment='Дата, время обновления записи',
        ),
        sa.PrimaryKeyConstraint('id', name=op.f('pk__cities')),
    )
    op.create_table(
        'users',
        sa.Column(
            'id', sa.Uuid(), nullable=False, comment='Идентификатор пользователя'
        ),
        sa.Column('email', sa.String(length=255), nullable=False, comment='Email'),
        sa.Column(
            'phone', sa.String(length=20), nullable=False, comment='Номер телефона'
        ),
        sa.Column('password', sa.String(length=255), nullable=False, comment='Пароль'),
        sa.Column('first_name', sa.String(length=100), nullable=False, comment='Имя'),
        sa.Column(
            'last_name', sa.String(length=100), nullable=False, comment='Фамилия'
        ),
        sa.Column('birth_date', sa.Date(), nullable=True, comment='Дата рождения'),
        sa.Column(
            'gender',
            sa.Integer(),
            nullable=False,
            comment='Пол (1 - мужской, 2 - женский, 3 - другой)',
        ),
        sa.Column(
            'avatar_url', sa.String(length=500), nullable=True, comment='URL аватара'
        ),
        sa.Column('bio', sa.Text(), nullable=True, comment='Описание профиля'),
        sa.Column('languages', sa.JSON(), nullable=True, comment='Языки общения'),
        sa.Column(
            'rating',
            sa.Numeric(precision=3, scale=2),
            nullable=False,
            comment='Рейтинг',
        ),
        sa.Column(
            'total_trips_as_driver',
            sa.Integer(),
            nullable=False,
            comment='Количество поездок водителем',
        ),
        sa.Column(
            'total_trips_as_passenger',
            sa.Integer(),
            nullable=False,
            comment='Количество поездок пассажиром',
        ),
        sa.Column('is_driver', sa.Boolean(), nullable=False, comment='Водитель'),
        sa.Column('is_active', sa.Boolean(), nullable=False, comment='Активен'),
        sa.Column('is_verified', sa.Boolean(), nullable=False, comment='Верификация'),
        sa.Column(
            'created_at',
            sa.DateTime(timezone=True),
            server_default=sa.text('now()'),
            nullable=False,
            comment='Дата, время создания записи',
        ),
        sa.Column(
            'updated_at',
            sa.DateTime(timezone=True),
            nullable=True,
            comment='Дата, время обновления записи',
        ),
        sa.PrimaryKeyConstraint('id', name=op.f('pk__users')),
        sa.UniqueConstraint('email', name=op.f('uq__users__email')),
        sa.UniqueConstraint('phone', name=op.f('uq__users__phone')),
    )
    op.create_table(
        'driver_profiles',
        sa.Column('id', sa.Uuid(), nullable=False, comment='Идентификатор водителя'),
        sa.Column(
            'user_id', sa.Uuid(), nullable=False, comment='Идентификатор пользователя'
        ),
        sa.Column(
            'created_at',
            sa.DateTime(timezone=True),
            server_default=sa.text('now()'),
            nullable=False,
            comment='Дата, время создания записи',
        ),
        sa.Column(
            'updated_at',
            sa.DateTime(timezone=True),
            nullable=True,
            comment='Дата, время обновления записи',
        ),
        sa.ForeignKeyConstraint(
            ['user_id'], ['users.id'], name=op.f('fk__driver_profiles__user_id__users')
        ),
        sa.PrimaryKeyConstraint('id', name=op.f('pk__driver_profiles')),
    )
    op.create_table(
        'routes',
        sa.Column(
            'id',
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment='Идентификатор маршрута',
        ),
        sa.Column(
            'departure_city_id',
            sa.Integer(),
            nullable=False,
            comment='Идентификатор города отправления',
        ),
        sa.Column(
            'arrival_city_id',
            sa.Integer(),
            nullable=False,
            comment='Идентификатор города прибытия',
        ),
        sa.Column(
            'distance_km',
            sa.Integer(),
            nullable=False,
            comment='Расстояние в километрах',
        ),
        sa.Column(
            'estimated_duration_minutes',
            sa.Integer(),
            nullable=False,
            comment='Ориентировочное время в пути (минуты)',
        ),
        sa.Column(
            'trips_count',
            sa.Integer(),
            nullable=False,
            comment='Количество поездок по маршруту',
        ),
        sa.Column(
            'created_at',
            sa.DateTime(timezone=True),
            server_default=sa.text('now()'),
            nullable=False,
            comment='Дата, время создания записи',
        ),
        sa.Column(
            'updated_at',
            sa.DateTime(timezone=True),
            nullable=True,
            comment='Дата, время обновления записи',
        ),
        sa.ForeignKeyConstraint(
            ['arrival_city_id'],
            ['cities.id'],
            name=op.f('fk__routes__arrival_city_id__cities'),
        ),
        sa.ForeignKeyConstraint(
            ['departure_city_id'],
            ['cities.id'],
            name=op.f('fk__routes__departure_city_id__cities'),
        ),
        sa.PrimaryKeyConstraint('id', name=op.f('pk__routes')),
    )
    op.create_table(
        'vehicles',
        sa.Column(
            'id',
            sa.Uuid(),
            nullable=False,
            comment='Идентификатор транспортного средства',
        ),
        sa.Column(
            'driver_profile_id',
            sa.Uuid(),
            nullable=False,
            comment='Идентификатор водителя',
        ),
        sa.Column(
            'make', sa.String(length=100), nullable=False, comment='Марка автомобиля'
        ),
        sa.Column(
            'model', sa.String(length=100), nullable=False, comment='Модель автомобиля'
        ),
        sa.Column(
            'color', sa.String(length=100), nullable=False, comment='Цвет автомобиля'
        ),
        sa.Column(
            'year', sa.Integer(), nullable=False, comment='Год выпуска автомобиля'
        ),
        sa.Column(
            'license_plate',
            sa.String(length=20),
            nullable=False,
            comment='Номер автомобиля',
        ),
        sa.Column(
            'total_seats', sa.Integer(), nullable=False, comment='Общее количество мест'
        ),
        sa.Column(
            'comfort_level',
            sa.Integer(),
            nullable=False,
            comment='Уровень комфорта (1 — Обычный, 2 — Комфортный, 3 — Премиум)',
        ),
        sa.Column(
            'created_at',
            sa.DateTime(timezone=True),
            server_default=sa.text('now()'),
            nullable=False,
            comment='Дата, время создания записи',
        ),
        sa.Column(
            'updated_at',
            sa.DateTime(timezone=True),
            nullable=True,
            comment='Дата, время обновления записи',
        ),
        sa.ForeignKeyConstraint(
            ['driver_profile_id'],
            ['driver_profiles.id'],
            name=op.f('fk__vehicles__driver_profile_id__driver_profiles'),
        ),
        sa.PrimaryKeyConstraint('id', name=op.f('pk__vehicles')),
        sa.UniqueConstraint('license_plate', name=op.f('uq__vehicles__license_plate')),
    )
    op.create_table(
        'trips',
        sa.Column(
            'id',
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment='Идентификатор поездки',
        ),
        sa.Column(
            'driver_id', sa.Uuid(), nullable=False, comment='Идентификатор водителя'
        ),
        sa.Column(
            'vehicle_id',
            sa.Uuid(),
            nullable=False,
            comment='Идентификатор транспортного средства',
        ),
        sa.Column(
            'route_id', sa.Integer(), nullable=False, comment='Идентификатор маршрута'
        ),
        sa.Column(
            'available_seats',
            sa.Integer(),
            nullable=False,
            comment='Количество доступных мест',
        ),
        sa.Column(
            'price_per_seat',
            sa.Numeric(precision=10, scale=2),
            nullable=False,
            comment='Цена за место',
        ),
        sa.Column(
            'intermediate_stops',
            sa.JSON(),
            nullable=True,
            comment='Промежуточные остановки (JSON)',
        ),
        sa.Column('currency', sa.String(length=3), nullable=False, comment='Валюта'),
        sa.Column(
            'status',
            sa.Integer(),
            nullable=False,
            comment='Статус поездки (1-запланирована, 2-подтверждена, 3-в пути, 4-завершена, 5-отменена)',
        ),
        sa.Column(
            'auto_accept_bookings',
            sa.Boolean(),
            nullable=False,
            comment='Автоматическое подтверждение бронирований',
        ),
        sa.Column(
            'smoking_allowed',
            sa.Boolean(),
            nullable=False,
            comment='Разрешено ли курение',
        ),
        sa.Column(
            'pets_allowed',
            sa.Boolean(),
            nullable=False,
            comment='Разрешены ли животные',
        ),
        sa.Column(
            'max_two_passengers_back',
            sa.Boolean(),
            nullable=False,
            comment='Максимум 2 пассажира сзади',
        ),
        sa.Column('description', sa.Text(), nullable=True, comment='Описание поездки'),
        sa.Column(
            'created_at',
            sa.DateTime(timezone=True),
            server_default=sa.text('now()'),
            nullable=False,
            comment='Дата, время создания записи',
        ),
        sa.Column(
            'updated_at',
            sa.DateTime(timezone=True),
            nullable=True,
            comment='Дата, время обновления записи',
        ),
        sa.ForeignKeyConstraint(
            ['driver_id'], ['users.id'], name=op.f('fk__trips__driver_id__users')
        ),
        sa.ForeignKeyConstraint(
            ['route_id'], ['routes.id'], name=op.f('fk__trips__route_id__routes')
        ),
        sa.ForeignKeyConstraint(
            ['vehicle_id'],
            ['vehicles.id'],
            name=op.f('fk__trips__vehicle_id__vehicles'),
        ),
        sa.PrimaryKeyConstraint('id', name=op.f('pk__trips')),
    )
    op.create_table(
        'bookings',
        sa.Column(
            'id',
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment='Идентификатор бронирования',
        ),
        sa.Column(
            'trip_id', sa.Integer(), nullable=False, comment='Идентификатор поездки'
        ),
        sa.Column(
            'passenger_id', sa.Uuid(), nullable=False, comment='Идентификатор пассажира'
        ),
        sa.Column(
            'seats_count',
            sa.Integer(),
            nullable=False,
            comment='Количество забронированных мест',
        ),
        sa.Column(
            'total_price',
            sa.Numeric(precision=10, scale=2),
            nullable=False,
            comment='Общая стоимость',
        ),
        sa.Column(
            'status', sa.Integer(), nullable=False, comment='Статус бронирования'
        ),
        sa.Column(
            'cancellation_reason', sa.Text(), nullable=True, comment='Причина отмены'
        ),
        sa.Column(
            'created_at',
            sa.DateTime(timezone=True),
            server_default=sa.text('now()'),
            nullable=False,
            comment='Дата, время создания записи',
        ),
        sa.Column(
            'updated_at',
            sa.DateTime(timezone=True),
            nullable=True,
            comment='Дата, время обновления записи',
        ),
        sa.ForeignKeyConstraint(
            ['passenger_id'],
            ['users.id'],
            name=op.f('fk__bookings__passenger_id__users'),
        ),
        sa.ForeignKeyConstraint(
            ['trip_id'], ['trips.id'], name=op.f('fk__bookings__trip_id__trips')
        ),
        sa.PrimaryKeyConstraint('id', name=op.f('pk__bookings')),
    )
    op.create_table(
        'messages',
        sa.Column('id', sa.Uuid(), nullable=False, comment='Идентификатор сообщения'),
        sa.Column(
            'trip_id', sa.Integer(), nullable=False, comment='Идентификатор поездки'
        ),
        sa.Column(
            'sender_id', sa.Uuid(), nullable=False, comment='Идентификатор отправителя'
        ),
        sa.Column(
            'receiver_id', sa.Uuid(), nullable=False, comment='Идентификатор получателя'
        ),
        sa.Column(
            'message_text', sa.Text(), nullable=False, comment='Содержание сообщения'
        ),
        sa.Column('is_read', sa.Boolean(), nullable=False, comment='Прочитано'),
        sa.Column(
            'created_at',
            sa.DateTime(timezone=True),
            server_default=sa.text('now()'),
            nullable=False,
            comment='Дата, время создания записи',
        ),
        sa.Column(
            'updated_at',
            sa.DateTime(timezone=True),
            nullable=True,
            comment='Дата, время обновления записи',
        ),
        sa.ForeignKeyConstraint(
            ['receiver_id'], ['users.id'], name=op.f('fk__messages__receiver_id__users')
        ),
        sa.ForeignKeyConstraint(
            ['sender_id'], ['users.id'], name=op.f('fk__messages__sender_id__users')
        ),
        sa.ForeignKeyConstraint(
            ['trip_id'], ['trips.id'], name=op.f('fk__messages__trip_id__trips')
        ),
        sa.PrimaryKeyConstraint('id', name=op.f('pk__messages')),
    )
    op.create_table(
        'reviews',
        sa.Column('id', sa.Uuid(), nullable=False, comment='Идентификатор отзыва'),
        sa.Column(
            'trip_id', sa.Integer(), nullable=False, comment='Идентификатор поездки'
        ),
        sa.Column(
            'reviewer_id',
            sa.Uuid(),
            nullable=False,
            comment='Идентификатор автора отзыва',
        ),
        sa.Column(
            'reviewee_id',
            sa.Uuid(),
            nullable=False,
            comment='Идентификатор получателя отзыва',
        ),
        sa.Column('rating', sa.Integer(), nullable=False, comment='Общая оценка (1-5)'),
        sa.Column('comment', sa.Text(), nullable=True, comment='Текст отзыва'),
        sa.Column(
            'is_visible', sa.Boolean(), nullable=False, comment='Видимость отзыва'
        ),
        sa.Column(
            'created_at',
            sa.DateTime(timezone=True),
            server_default=sa.text('now()'),
            nullable=False,
            comment='Дата, время создания записи',
        ),
        sa.Column(
            'updated_at',
            sa.DateTime(timezone=True),
            nullable=True,
            comment='Дата, время обновления записи',
        ),
        sa.ForeignKeyConstraint(
            ['reviewee_id'], ['users.id'], name=op.f('fk__reviews__reviewee_id__users')
        ),
        sa.ForeignKeyConstraint(
            ['reviewer_id'], ['users.id'], name=op.f('fk__reviews__reviewer_id__users')
        ),
        sa.ForeignKeyConstraint(
            ['trip_id'], ['trips.id'], name=op.f('fk__reviews__trip_id__trips')
        ),
        sa.PrimaryKeyConstraint('id', name=op.f('pk__reviews')),
    )
    op.create_table(
        'payments',
        sa.Column('id', sa.Uuid(), nullable=False, comment='Идентификатор платежа'),
        sa.Column(
            'booking_id',
            sa.Integer(),
            nullable=False,
            comment='Идентификатор бронирования',
        ),
        sa.Column(
            'amount',
            sa.Numeric(precision=10, scale=2),
            nullable=False,
            comment='Сумма платежа',
        ),
        sa.Column('currency', sa.String(length=3), nullable=False, comment='Валюта'),
        sa.Column(
            'platform_fee',
            sa.Numeric(precision=10, scale=2),
            nullable=False,
            comment='Комиссия платформы',
        ),
        sa.Column(
            'driver_amount',
            sa.Numeric(precision=10, scale=2),
            nullable=False,
            comment='Сумма к выплате водителю',
        ),
        sa.Column(
            'payment_method', sa.Integer(), nullable=False, comment='Способ оплаты'
        ),
        sa.Column(
            'payment_provider',
            sa.String(length=50),
            nullable=True,
            comment='Провайдер платежей',
        ),
        sa.Column(
            'external_payment_id',
            sa.String(length=100),
            nullable=True,
            comment='Внешний ID платежа',
        ),
        sa.Column('status', sa.Integer(), nullable=False, comment='Статус платежа'),
        sa.Column(
            'processed_at',
            sa.DateTime(timezone=True),
            nullable=True,
            comment='Время обработки платежа',
        ),
        sa.Column(
            'created_at',
            sa.DateTime(timezone=True),
            server_default=sa.text('now()'),
            nullable=False,
            comment='Дата, время создания записи',
        ),
        sa.Column(
            'updated_at',
            sa.DateTime(timezone=True),
            nullable=True,
            comment='Дата, время обновления записи',
        ),
        sa.ForeignKeyConstraint(
            ['booking_id'],
            ['bookings.id'],
            name=op.f('fk__payments__booking_id__bookings'),
        ),
        sa.PrimaryKeyConstraint('id', name=op.f('pk__payments')),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('payments')
    op.drop_table('reviews')
    op.drop_table('messages')
    op.drop_table('bookings')
    op.drop_table('trips')
    op.drop_table('vehicles')
    op.drop_table('routes')
    op.drop_table('driver_profiles')
    op.drop_table('users')
    op.drop_table('cities')
    # ### end Alembic commands ###
